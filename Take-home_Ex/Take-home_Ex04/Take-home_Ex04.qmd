---
title: "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application"
author: "Chrissandro"
date: "6 March 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
---

# Overview

For this take-home exercise, I am tasked with prototyping key modules for the R Shiny application that is poised to serve as an integral component of our group project. The initial stages of this exercise are dedicated to data preparation and the providing some insightful data visualizations. This foundational work is essential for setting the stage for subsequent nowcasting analyses of selected datasets as aligned with our project topic **'Discovering State of Economic in Singapore with Nowcasting Methods'**.

Following that, the design and development of the user interface (UI) for the R Shiny web application will also be provided. This phase is geared towards ensuring that the application is not only functional but also intuitive and engaging for users, thereby enhancing the overall effectiveness and accessibility of the data insights generated by our group project.

# Data Preparation

## Installing and launching packages

```{r}
pacman::p_load(tidyverse, forecast, tseries, ggplot2, plotly, zoo, patchwork)
```

## Importing data

The datasets used in this exercise can be found [here](https://insights-ceicdata-com.libproxy.smu.edu.sg).

Two of the datasets used in our final group projects are as listed:

-   Retail Sales Value
-   Food and Beverage Sales Value

The datasets have been cleaned to show the date and mean sales value per month.

::: panel-tabset
## Retail Sales

```{r}
salesdata <- read_csv("Data/Retail Sales Value 2017100.csv")
str(salesdata)
```

## Food & Beverage Sales

```{r}
fnbdata <- read_csv("Data/Food and Beverage Services Value 2017100.csv")
str(fnbdata)
```
:::

## Data Wrangling

The "DATE" column in the format 'MM/YYYY' needs to be converted into a *Date* type that R can recognize for time series analysis. However, since the data represents monthly data without specific days, we'll create a date that represents the first day of each month for consistency.

```{r}
start_date <- as.Date('2000-01-01')

salesdata$Date <- as.Date(paste0("01/", salesdata$Date), format="%d/%m/%Y")
salesdata <- salesdata[salesdata$Date >= start_date, ]

fnbdata$Date <- as.Date(paste0("01/", fnbdata$Date), format="%d/%m/%Y")
fnbdata <- fnbdata[fnbdata$Date >= start_date, ]
```

Let's convert the Date column to *Yearmon* value for better readability of the date. The *range* function will verify the start and end date of the dataset we're going to use.

```{r}
salesdata$Date <- as.yearmon(salesdata$Date)
fnbdata$Date <- as.yearmon(fnbdata$Date)

range(salesdata$Date)
range(fnbdata$Date)
```

# Data Visualization

Using **ggplot2**, the sales value will be visualized as seen below and **plotly** package is used to provide interactivity to the chart below to provide detailed information of specific data points.

::: panel-tabset
## Retail Sales

```{r}
#| code-fold: true
#| code-summary: Show code
ggplotly(ggplot(salesdata, aes(x = Date, y = Value)) + 
  geom_line() +
  geom_point(size=1) +
  labs(title = "Retail Sales Value From Jan 2000-Jan 2024",
       x = "Date",
       y = "Sales (SGD)") + 
  theme_minimal()
)
```

::: callout-note
## Visualization Insights:

-   **Trend**: The trend is showing a definite increase in retail sales value for the past 20+ years as time progresses, so it is safe to assume from the trends that retail sales are going to always increase in the future disregarding external factors that might divert that assumption.

-   **Seasonality**: From the line chart above, it can be observed that for the month of February of every year shows a downward spike of retail sales. This might indicate seasonality or predictable changes for a specific time, which in this case is highly likely caused by **Lunar New Year celebrations** which is celebrated by majority of Singapore's populations.

-   **Outlier**: An outlier can be seen during the COVID period of early 2020s to the end of 2021 where retail sales value spikes all the way down by more than 50%.
:::

## Food and Beverage Sales

```{r}
#| code-fold: true
#| code-summary: Show code
ggplotly(ggplot(fnbdata, aes(x = Date, y = Value)) + 
  geom_line() +
  geom_point(size=1) +
  labs(title = "Food and Beverage Sales Value From Jan 2000-Jan 2024",
       x = "Date",
       y = "Sales (SGD)") + 
  theme_minimal()
)
```

::: callout-note
## Visualization Insights:

-   **Trend**: The trend is showing a definite increase in food and beverage sales value for the past 20+ years as time progresses, so it is safe to assume from the trends that it is going to always increase in the future disregarding external factors that might divert that assumption.

-   **Seasonality**: From the line chart above, it can be observed that for the month of December of every year shows a upward spike of food and beverage sales. This might indicate seasonality or predictable changes for a specific time, which in this case is highly likely caused by **Christmas holiday celebrations** that is celebrated by majority of Singapore's population.

-   **Outlier**: An outlier can be seen during the COVID period of early 2020s to the end of 2020 where food and beverage sales value spikes all the way down by more than 50%.
:::
:::

::: callout-tip
## Interactivity Features:

-   **Data Points**: You can hover over any data points to look at detailed information of specific month and year and the mean value.

-   **Pinch and Zoom**: You can drag to zoom in certain period of time in the line chart to separate each data point more clearly.
:::

# Time Series Analysis and Nowcasting

## Nowcasting Model: Linear Regression (Simple)

::: panel-tabset
## Retail Sales

```{r}
lm_sales_model <- lm(Value ~ Date, data=salesdata)
summary(lm_sales_model)
```

```{r}
#| code-fold: true
#| code-summary: Show code
plot(salesdata$Date, 
     salesdata$Value, 
     main="Linear Regression Model Plot for Retail Sales Value", 
     xlab="Date", 
     ylab="Sales", 
     col="blue")
abline(lm_sales_model, col="red")
```

## Food and Beverage Sales

```{r}
lm_fnb_model <- lm(Value ~ Date, data=fnbdata)
summary(lm_fnb_model)
```

```{r}
#| code-fold: true
#| code-summary: Show code
plot(fnbdata$Date, 
     fnbdata$Value, 
     main="Linear Regression Model Plot for F&B Sales Value", 
     xlab="Date", 
     ylab="Sales", 
     col="blue")
abline(lm_fnb_model, col="red")
```
:::

Linear regression models can be very useful for understanding trends over time, but they have **limitations**. They assume a linear relationship between predictors and the target variable, do not capture seasonal or cyclic patterns unless explicitly modeled, and can be sensitive to outliers. For time series data that exhibits seasonality, trends, and irregular cycles, more complex models might provide better accuracy. Thus, I decided to use ARIMA (Autoregressive Integrated Moving Average) as my chosen type of nowcasting model as it is useful for capturing various statistical properties in a time series data.

## Nowcasting Model: ARIMA (Autoregressive Integrated Moving Average)

### Converting Dataframe to Time Series

```{r}
sales_ts <- ts(salesdata$Value, start=c(2000, 1), frequency=12)
fnb_ts <- ts(fnbdata$Value, start=c(2000,1), frequency=12)
```

::: panel-tabset
## Retail Sales

```{r}
#| code-fold: true
#| code-summary: Show code
plot(sales_ts, xlab="Year", ylab="Sales", main="Retail Sales Line Chart")
```

```{r}
sales_fit <- auto.arima(sales_ts)

# You can inspect the chosen model
summary(sales_fit)
```

```{r}
input_h <- 12
sales_forecast <- forecast(sales_fit, h=input_h)
```

## F&B Sales

```{r}
#| code-fold: true
#| code-summary: Show code
plot(fnb_ts, xlab="Year", ylab="Sales", main="F&B Sales Line Chart")
```

```{r}
fnb_fit <- auto.arima(fnb_ts)

# You can inspect the chosen model
summary(fnb_fit)
```

```{r}
input_h <- 12
fnb_forecast <- forecast(fnb_fit, h=input_h)
```
:::

Using an 80% confidence interval for forecasting, including in the context of ARIMA models, is a choice that balances the need for precision and the acceptance of uncertainty in the forecast. The code chunk below is to show the forecasted values in the next 1 year.

```{r}
sales_forecast_values <- data.frame(
  Date = as.Date(sales_forecast$mean),
  Value = as.numeric(sales_forecast$mean),
  Lower = as.numeric(sales_forecast$lower[, "80%"]),
  Upper = as.numeric(sales_forecast$upper[, "80%"])
)

fnb_forecast_values <- data.frame(
  Date = as.Date(fnb_forecast$mean),
  Value = as.numeric(fnb_forecast$mean),
  Lower = as.numeric(fnb_forecast$lower[, "80%"]),
  Upper = as.numeric(fnb_forecast$upper[, "80%"])
)
```

::: panel-tabset
## Retail Sales

```{r}
#| code-fold: true
#| code-summary: Show code
salesdata$Date <- as.Date(salesdata$Date)

plot_ly() %>%
  add_trace(data = salesdata, x = ~Date, y = ~Value, type = 'scatter', mode = 'lines+markers', name = 'Observed') %>%
  add_trace(data = sales_forecast_values, x = ~Date, y = ~Value, type = 'scatter', mode = 'lines+markers', name = 'Forecasted', line = list(dash = 'dot')) %>%
  add_ribbons(data = sales_forecast_values, x = ~Date, ymin = ~Lower, ymax = ~Upper, name = 'Confidence Interval', fillcolor = 'rgba(255, 0, 0, 0.2)', line = list(color = 'transparent')) %>%
  layout(title = 'Feb 2024 - Jan 2025 Retail Sales Value Nowcasted with ARIMA',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Value (SGD)'))
```

## F&B Sales

```{r}
#| code-fold: true
#| code-summary: Show code
fnbdata$Date <- as.Date(fnbdata$Date)

plot_ly() %>%
  add_trace(data = fnbdata, x = ~Date, y = ~Value, type = 'scatter', mode = 'lines+markers', name = 'Observed') %>%
  add_trace(data = fnb_forecast_values, x = ~Date, y = ~Value, type = 'scatter', mode = 'lines+markers', name = 'Forecasted', line = list(dash = 'dot')) %>%
  add_ribbons(data = fnb_forecast_values, x = ~Date, ymin = ~Lower, ymax = ~Upper, name = 'Confidence Interval', fillcolor = 'rgba(255, 0, 0, 0.2)', line = list(color = 'transparent')) %>%
  layout(title = 'Feb 2024 - Jan 2025 F&B Sales Value Nowcasted with ARIMA',
         xaxis = list(title = 'Date'),
         yaxis = list(title = 'Value (SGD)'))
```
:::

# Shiny Storyboarding

![](images/UI-Historical.png){width="781"}

![](images/UI-Nowcasted.png){width="788"}
