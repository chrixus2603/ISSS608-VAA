---
title: "Hands-on Exercise 4b: Visual Statistical Analysis"
author: "Chrissandro"
date: "30 January 2024"
date-modified: "last-modified"
execute:
  warning: false
---

# What Will I Learn?

In this hands-on exercise, I will learn and gain hands-on experience on using:

-   ggstatsplot package to create visual graphics with rich statistical information,

-   performance package to visualise model diagnostics, and

-   parameters package to visualise model parameters.

# Getting Started

## Loading the R packages

First, write a code chunk to check, install and load the following R packages: ggstatsplot and tidyverse.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

## Importing the data

In this hands-on exercise, *Exam_data.csv* will be used.

```{r}
exam <- read_csv("data/Exam_data.csv")
```

## One-sample test: gghistostats() method

In the code chunk below, **gghistostats()** is used to to build an visual of one-sample test on English scores.

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

## Two-sample mean test: ggbetweenstats()

In the code chunk below, **ggbetweenstats()** is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

## Oneway ANOVA Test: ggbetweenstats() method

In the code chunk below, **ggbetweenstats()** is used to build a visual for One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

## Significant Test of Correlation: ggscatterstats()

In the code chunk below, **ggscatterstats()** is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

## Significant Test of Association (Depedence) : ggbarstats() methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using *cut()*.

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below **ggbarstats()** is used to build a visual for Significant Test of Association.

```{r}
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

# Visualising Models

In this section, I will learn how to visualise model diagnostic and model parameters by using parameters package.

-   Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

# Getting Started

## Loading the R packages

First, write a code chunk to check, install and load the following R packages.

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

## Importing data

In the code chunk below, *read_xls()* of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

# Data Visualizing

## Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

## Model Diagnostic: checking for multicolinearity

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

## Model Diagnostic: checking normality assumption

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n)
```

## Model Diagnostic: Check model for homogeneity of variances

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

## Model Diagnostic: Complete check

```{r}
check_model(model1)
```

## Visualising Regression Parameters: see methods

In the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

## Visualising Regression Parameters: ggcoefstats() methods

In the code below, **ggcoefstats()** of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```